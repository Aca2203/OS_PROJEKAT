GAS LISTING /tmp/cchaOj7l.s 			page 1


   1              		.file	"syscall_c.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_Z9mem_allocm
   9              	_Z9mem_allocm:
  10              	.LFB42:
  11              		.file 1 "src/syscall_c.cpp"
   1:src/syscall_c.cpp **** #include "../h/syscall_c.hpp"
   2:src/syscall_c.cpp **** #include "../lib/hw.h"
   3:src/syscall_c.cpp **** #include "../h/riscv.hpp"
   4:src/syscall_c.cpp **** 
   5:src/syscall_c.cpp **** class _sem{
   6:src/syscall_c.cpp ****     int id;
   7:src/syscall_c.cpp **** };
   8:src/syscall_c.cpp **** 
   9:src/syscall_c.cpp **** void* mem_alloc(size_t size) {
  12              		.loc 1 9 30
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FE 		addi	sp,sp,-32
  16              		.cfi_def_cfa_offset 32
  17 0004 233C8100 		sd	s0,24(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040102 		addi	s0,sp,32
  20              		.cfi_def_cfa 8, 0
  10:src/syscall_c.cpp **** 
  11:src/syscall_c.cpp ****     __asm__ volatile("mv a1, %0" : : "r"(size));
  21              		.loc 1 11 5
  22              		.loc 1 11 48 is_stmt 0
  23              	#APP
  24              	# 11 "src/syscall_c.cpp" 1
  12              	    Riscv::w_a0(0x01);
  25              		mv a1, a0
  26              	# 0 "" 2
  27              		.loc 1 12 5 is_stmt 1
  28              	.LVL1:
  29              	#NO_APP
  30              	.LBB10:
  31              	.LBB11:
  32              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** #ifndef RISCV_H
   2:src/../h/riscv.hpp **** #define RISCV_H
   3:src/../h/riscv.hpp **** 
   4:src/../h/riscv.hpp **** #include "../lib/hw.h"
   5:src/../h/riscv.hpp **** 
   6:src/../h/riscv.hpp **** class Riscv {
   7:src/../h/riscv.hpp **** public:
   8:src/../h/riscv.hpp ****     // Stavljanje/skidanje registara x3,...,x31 na stek/sa steka
   9:src/../h/riscv.hpp ****     static void pushRegisters();
  10:src/../h/riscv.hpp ****     static void popRegisters();
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp ****     // Uzimanje vrednosti sstatus.spp i sstatus.spie bita (nije inline funkcija)
  13:src/../h/riscv.hpp ****     static void popSppSpie();
  14:src/../h/riscv.hpp **** 
GAS LISTING /tmp/cchaOj7l.s 			page 2


  15:src/../h/riscv.hpp ****     // Citanje vrednosti registra scause
  16:src/../h/riscv.hpp ****     static uint64 r_scause();
  17:src/../h/riscv.hpp **** 
  18:src/../h/riscv.hpp ****     // Upisivanje u registar scause
  19:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  20:src/../h/riscv.hpp **** 
  21:src/../h/riscv.hpp ****     // Citanje registra sepc
  22:src/../h/riscv.hpp ****     static uint64 r_sepc();
  23:src/../h/riscv.hpp **** 
  24:src/../h/riscv.hpp ****     // Upisivanje u registar sepc
  25:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // Citanje registra stvec
  28:src/../h/riscv.hpp ****     static uint64 r_stvec();
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // Upisivanje u registar stvec
  31:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // Citanje registra stval
  34:src/../h/riscv.hpp ****     static uint64 r_stval();
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // Upisivanje u registar stval
  37:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     enum BitMaskSip {
  40:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  41:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  42:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9)
  43:src/../h/riscv.hpp ****     };
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // Postavi masku za registar sip
  46:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // Obrisi masku iz registra sip
  49:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // Citanje registra sip
  52:src/../h/riscv.hpp ****     static uint64 r_sip();
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // Upisivanje u registar sip
  55:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     enum BitMaskSstatus {
  58:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  59:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  60:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  61:src/../h/riscv.hpp ****     };
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     // Postavi masku za registar sstatus
  64:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // Obrisi masku iz registra sstatus
  67:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // Citanje registra sstatus
  70:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  71:src/../h/riscv.hpp **** 
GAS LISTING /tmp/cchaOj7l.s 			page 3


  72:src/../h/riscv.hpp ****     // Upisivanje u registar sstatus
  73:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // Supervizorska prekidna rutina
  76:src/../h/riscv.hpp ****     static void supervisorTrap();
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // Citanje registra a0
  79:src/../h/riscv.hpp ****     static uint64 r_a0();
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // Upisivanje u registar a0
  82:src/../h/riscv.hpp ****     static void w_a0(uint64 value);
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp **** private:
  85:src/../h/riscv.hpp ****     // Rukovalac prekidnom rutinom
  86:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  87:src/../h/riscv.hpp **** };
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause() {
  90:src/../h/riscv.hpp ****     uint64 volatile scause;
  91:src/../h/riscv.hpp ****     __asm__ volatile("csrr %0, scause" : "=r"(scause));
  92:src/../h/riscv.hpp ****     return scause;
  93:src/../h/riscv.hpp **** }
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  96:src/../h/riscv.hpp ****     __asm__ volatile("csrw scause, %0" : : "r"(scause));
  97:src/../h/riscv.hpp **** }
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc() {
 100:src/../h/riscv.hpp ****     uint64 volatile sepc;
 101:src/../h/riscv.hpp ****     __asm__ volatile("csrr %0, sepc" : "=r"(sepc));
 102:src/../h/riscv.hpp ****     return sepc;
 103:src/../h/riscv.hpp **** }
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
 106:src/../h/riscv.hpp ****     __asm__ volatile("csrw sepc, %0" : : "r"(sepc));
 107:src/../h/riscv.hpp **** }
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec() {
 110:src/../h/riscv.hpp ****     uint64 volatile stvec;
 111:src/../h/riscv.hpp ****     __asm__ volatile("csrr %0, stvec" : "=r"(stvec));
 112:src/../h/riscv.hpp ****     return stvec;
 113:src/../h/riscv.hpp **** }
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 116:src/../h/riscv.hpp ****     __asm__ volatile("csrw stvec, %0" : : "r"(stvec));
 117:src/../h/riscv.hpp **** }
 118:src/../h/riscv.hpp **** 
 119:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval() {
 120:src/../h/riscv.hpp ****     uint64 volatile stval;
 121:src/../h/riscv.hpp ****     __asm__ volatile("csrr %0, stval" : "=r"(stval));
 122:src/../h/riscv.hpp ****     return stval;
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval) {
 126:src/../h/riscv.hpp ****     __asm__ volatile("csrw stval, %0" : : "r"(stval));
 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
GAS LISTING /tmp/cchaOj7l.s 			page 4


 129:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 130:src/../h/riscv.hpp ****     __asm__ volatile("csrs sip, %0" : : "r"(mask));
 131:src/../h/riscv.hpp **** }
 132:src/../h/riscv.hpp **** 
 133:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 134:src/../h/riscv.hpp ****     __asm__ volatile("csrc sip, %0" : : "r"(mask));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip() {
 138:src/../h/riscv.hpp ****     uint64 volatile sip;
 139:src/../h/riscv.hpp ****     __asm__ volatile("csrr %0, sip" : "=r"(sip));
 140:src/../h/riscv.hpp ****     return sip;
 141:src/../h/riscv.hpp **** }
 142:src/../h/riscv.hpp **** 
 143:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 144:src/../h/riscv.hpp ****     __asm__ volatile("csrc sip, %0" : : "r"(sip));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 148:src/../h/riscv.hpp ****     __asm__ volatile("csrs sstatus, %0" : : "r"(mask));
 149:src/../h/riscv.hpp **** }
 150:src/../h/riscv.hpp **** 
 151:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 152:src/../h/riscv.hpp ****     __asm__ volatile("csrc sstatus, %0" : : "r"(mask));
 153:src/../h/riscv.hpp **** }
 154:src/../h/riscv.hpp **** 
 155:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus() {
 156:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 157:src/../h/riscv.hpp ****     __asm__ volatile("csrr %0, sstatus" : "=r"(sstatus));
 158:src/../h/riscv.hpp ****     return sstatus;
 159:src/../h/riscv.hpp **** }
 160:src/../h/riscv.hpp **** 
 161:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus) {
 162:src/../h/riscv.hpp ****     __asm__ volatile("csrc sstatus, %0" : : "r"(sstatus));
 163:src/../h/riscv.hpp **** }
 164:src/../h/riscv.hpp **** 
 165:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0() {
 166:src/../h/riscv.hpp ****     uint64 volatile a0;
 167:src/../h/riscv.hpp ****     __asm__ volatile("mv %0, a0" : "=r"(a0));
 168:src/../h/riscv.hpp ****     return a0;
 169:src/../h/riscv.hpp **** }
 170:src/../h/riscv.hpp **** 
 171:src/../h/riscv.hpp **** inline void Riscv::w_a0(uint64 value) {
 172:src/../h/riscv.hpp ****     __asm__ volatile("mv a0, %0" : : "r"(value));
  33              		.loc 2 172 5
  34              		.loc 2 172 49 is_stmt 0
  35 0010 93071000 		li	a5,1
  36              	#APP
  37              	# 172 "src/../h/riscv.hpp" 1
 173              	}
  38              		mv a0, a5
  39              	# 0 "" 2
  40              	.LVL2:
  41              	#NO_APP
  42              	.LBE11:
  43              	.LBE10:
  13:src/syscall_c.cpp ****     __asm__ volatile("ecall");
GAS LISTING /tmp/cchaOj7l.s 			page 5


  44              		.loc 1 13 5 is_stmt 1
  45              		.loc 1 13 30 is_stmt 0
  46              	#APP
  47              	# 13 "src/syscall_c.cpp" 1
  14              	
  15:src/syscall_c.cpp ****     void* ret;
  48              		ecall
  49              	# 0 "" 2
  50              		.loc 1 15 5 is_stmt 1
  16:src/syscall_c.cpp ****     ret = (void*) Riscv::r_a0();
  51              		.loc 1 16 5
  52              	#NO_APP
  53              	.LBB12:
  54              	.LBB13:
 166:src/../h/riscv.hpp ****     __asm__ volatile("mv %0, a0" : "=r"(a0));
  55              		.loc 2 166 5
 167:src/../h/riscv.hpp ****     return a0;
  56              		.loc 2 167 5
 167:src/../h/riscv.hpp ****     return a0;
  57              		.loc 2 167 45 is_stmt 0
  58              	#APP
  59              	# 167 "src/../h/riscv.hpp" 1
  60              		mv a5, a0
  61              	# 0 "" 2
  62              	#NO_APP
  63 0020 2334F4FE 		sd	a5,-24(s0)
 168:src/../h/riscv.hpp **** }
  64              		.loc 2 168 5 is_stmt 1
 168:src/../h/riscv.hpp **** }
  65              		.loc 2 168 12 is_stmt 0
  66 0024 033584FE 		ld	a0,-24(s0)
  67              	.LVL3:
  68              	.LBE13:
  69              	.LBE12:
  17:src/syscall_c.cpp ****     return ret;
  70              		.loc 1 17 5 is_stmt 1
  18:src/syscall_c.cpp **** }
  71              		.loc 1 18 1 is_stmt 0
  72 0028 03348101 		ld	s0,24(sp)
  73              		.cfi_restore 8
  74              		.cfi_def_cfa 2, 32
  75 002c 13010102 		addi	sp,sp,32
  76              		.cfi_def_cfa_offset 0
  77 0030 67800000 		jr	ra
  78              		.cfi_endproc
  79              	.LFE42:
  81              		.align	2
  82              		.globl	_Z8mem_freePv
  84              	_Z8mem_freePv:
  85              	.LFB43:
  19:src/syscall_c.cpp **** 
  20:src/syscall_c.cpp **** int mem_free(void* ptr) {
  86              		.loc 1 20 25 is_stmt 1
  87              		.cfi_startproc
  88              	.LVL4:
  89 0034 130101FE 		addi	sp,sp,-32
  90              		.cfi_def_cfa_offset 32
GAS LISTING /tmp/cchaOj7l.s 			page 6


  91 0038 233C8100 		sd	s0,24(sp)
  92              		.cfi_offset 8, -8
  93 003c 13040102 		addi	s0,sp,32
  94              		.cfi_def_cfa 8, 0
  21:src/syscall_c.cpp ****     __asm__ volatile("mv a1, %0" : : "r"(ptr));
  95              		.loc 1 21 5
  96              		.loc 1 21 47 is_stmt 0
  97              	#APP
  98              	# 21 "src/syscall_c.cpp" 1
  22              	    Riscv::w_a0(0x02);
  99              		mv a1, a0
 100              	# 0 "" 2
 101              		.loc 1 22 5 is_stmt 1
 102              	.LVL5:
 103              	#NO_APP
 104              	.LBB14:
 105              	.LBB15:
 172:src/../h/riscv.hpp **** }
 106              		.loc 2 172 5
 172:src/../h/riscv.hpp **** }
 107              		.loc 2 172 49 is_stmt 0
 108 0044 93072000 		li	a5,2
 109              	#APP
 110              	# 172 "src/../h/riscv.hpp" 1
 111              		mv a0, a5
 112              	# 0 "" 2
 113              	.LVL6:
 114              	#NO_APP
 115              	.LBE15:
 116              	.LBE14:
  23:src/syscall_c.cpp ****     __asm__ volatile("ecall");
 117              		.loc 1 23 5 is_stmt 1
 118              		.loc 1 23 30 is_stmt 0
 119              	#APP
 120              	# 23 "src/syscall_c.cpp" 1
  24              	
  25:src/syscall_c.cpp ****     int ret = (int) Riscv::r_a0();
 121              		ecall
 122              	# 0 "" 2
 123              		.loc 1 25 5 is_stmt 1
 124              	#NO_APP
 125              	.LBB16:
 126              	.LBB17:
 166:src/../h/riscv.hpp ****     __asm__ volatile("mv %0, a0" : "=r"(a0));
 127              		.loc 2 166 5
 167:src/../h/riscv.hpp ****     return a0;
 128              		.loc 2 167 5
 167:src/../h/riscv.hpp ****     return a0;
 129              		.loc 2 167 45 is_stmt 0
 130              	#APP
 131              	# 167 "src/../h/riscv.hpp" 1
 132              		mv a5, a0
 133              	# 0 "" 2
 134              	#NO_APP
 135 0054 2334F4FE 		sd	a5,-24(s0)
 168:src/../h/riscv.hpp **** }
 136              		.loc 2 168 5 is_stmt 1
GAS LISTING /tmp/cchaOj7l.s 			page 7


 168:src/../h/riscv.hpp **** }
 137              		.loc 2 168 12 is_stmt 0
 138 0058 033584FE 		ld	a0,-24(s0)
 139              	.LVL7:
 140              	.LBE17:
 141              	.LBE16:
  26:src/syscall_c.cpp ****     return ret;
 142              		.loc 1 26 5 is_stmt 1
  27:src/syscall_c.cpp **** }
 143              		.loc 1 27 1 is_stmt 0
 144 005c 1B050500 		sext.w	a0,a0
 145 0060 03348101 		ld	s0,24(sp)
 146              		.cfi_restore 8
 147              		.cfi_def_cfa 2, 32
 148 0064 13010102 		addi	sp,sp,32
 149              		.cfi_def_cfa_offset 0
 150 0068 67800000 		jr	ra
 151              		.cfi_endproc
 152              	.LFE43:
 154              		.align	2
 155              		.globl	_Z15thread_dispatchv
 157              	_Z15thread_dispatchv:
 158              	.LFB44:
  28:src/syscall_c.cpp **** 
  29:src/syscall_c.cpp **** 
  30:src/syscall_c.cpp **** void thread_dispatch() {
 159              		.loc 1 30 24 is_stmt 1
 160              		.cfi_startproc
 161 006c 130101FF 		addi	sp,sp,-16
 162              		.cfi_def_cfa_offset 16
 163 0070 23348100 		sd	s0,8(sp)
 164              		.cfi_offset 8, -8
 165 0074 13040101 		addi	s0,sp,16
 166              		.cfi_def_cfa 8, 0
  31:src/syscall_c.cpp ****     __asm__ volatile("li a0, 0x13");
 167              		.loc 1 31 5
 168              		.loc 1 31 36 is_stmt 0
 169              	#APP
 170              	# 31 "src/syscall_c.cpp" 1
  32              	    __asm__ volatile("ecall");
 171              		li a0, 0x13
 172              	# 0 "" 2
 173              		.loc 1 32 5 is_stmt 1
 174              		.loc 1 32 30 is_stmt 0
 175              	# 32 "src/syscall_c.cpp" 1
  33              	}...
 176              		ecall
 177              	# 0 "" 2
 178              		.loc 1 33 1
 179              	#NO_APP
 180 0080 03348100 		ld	s0,8(sp)
 181              		.cfi_restore 8
 182              		.cfi_def_cfa 2, 16
 183 0084 13010101 		addi	sp,sp,16
 184              		.cfi_def_cfa_offset 0
 185 0088 67800000 		jr	ra
 186              		.cfi_endproc
GAS LISTING /tmp/cchaOj7l.s 			page 8


 187              	.LFE44:
 189              	.Letext0:
 190              		.file 3 "src/../h/../lib/hw.h"
 191              		.file 4 "src/../h/syscall_c.hpp"
GAS LISTING /tmp/cchaOj7l.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 syscall_c.cpp
     /tmp/cchaOj7l.s:9      .text:0000000000000000 _Z9mem_allocm
     /tmp/cchaOj7l.s:13     .text:0000000000000000 .L0 
     /tmp/cchaOj7l.s:15     .text:0000000000000000 .L0 
     /tmp/cchaOj7l.s:16     .text:0000000000000004 .L0 
     /tmp/cchaOj7l.s:18     .text:0000000000000008 .L0 
     /tmp/cchaOj7l.s:20     .text:000000000000000c .L0 
     /tmp/cchaOj7l.s:22     .text:000000000000000c .L0 
   src/syscall_c.cpp:11     .text:000000000000000c .L0 
     /tmp/cchaOj7l.s:33     .text:0000000000000010 .L0 
     /tmp/cchaOj7l.s:34     .text:0000000000000010 .L0 
     /tmp/cchaOj7l.s:35     .text:0000000000000010 .L0 
     /tmp/cchaOj7l.s:45     .text:0000000000000018 .L0 
   src/syscall_c.cpp:13     .text:0000000000000018 .L0 
     /tmp/cchaOj7l.s:51     .text:000000000000001c .L0 
     /tmp/cchaOj7l.s:55     .text:000000000000001c .L0 
     /tmp/cchaOj7l.s:56     .text:000000000000001c .L0 
     /tmp/cchaOj7l.s:57     .text:000000000000001c .L0 
  src/../h/riscv.hpp:167    .text:000000000000001c .L0 
     /tmp/cchaOj7l.s:65     .text:0000000000000024 .L0 
     /tmp/cchaOj7l.s:66     .text:0000000000000024 .L0 
     /tmp/cchaOj7l.s:71     .text:0000000000000028 .L0 
     /tmp/cchaOj7l.s:72     .text:0000000000000028 .L0 
     /tmp/cchaOj7l.s:73     .text:000000000000002c .L0 
     /tmp/cchaOj7l.s:74     .text:000000000000002c .L0 
     /tmp/cchaOj7l.s:76     .text:0000000000000030 .L0 
     /tmp/cchaOj7l.s:78     .text:0000000000000034 .L0 
     /tmp/cchaOj7l.s:84     .text:0000000000000034 _Z8mem_freePv
     /tmp/cchaOj7l.s:87     .text:0000000000000034 .L0 
     /tmp/cchaOj7l.s:89     .text:0000000000000034 .L0 
     /tmp/cchaOj7l.s:90     .text:0000000000000038 .L0 
     /tmp/cchaOj7l.s:92     .text:000000000000003c .L0 
     /tmp/cchaOj7l.s:94     .text:0000000000000040 .L0 
     /tmp/cchaOj7l.s:96     .text:0000000000000040 .L0 
   src/syscall_c.cpp:21     .text:0000000000000040 .L0 
     /tmp/cchaOj7l.s:106    .text:0000000000000044 .L0 
     /tmp/cchaOj7l.s:107    .text:0000000000000044 .L0 
     /tmp/cchaOj7l.s:108    .text:0000000000000044 .L0 
     /tmp/cchaOj7l.s:118    .text:000000000000004c .L0 
   src/syscall_c.cpp:23     .text:000000000000004c .L0 
     /tmp/cchaOj7l.s:127    .text:0000000000000050 .L0 
     /tmp/cchaOj7l.s:128    .text:0000000000000050 .L0 
     /tmp/cchaOj7l.s:129    .text:0000000000000050 .L0 
  src/../h/riscv.hpp:167    .text:0000000000000050 .L0 
     /tmp/cchaOj7l.s:137    .text:0000000000000058 .L0 
     /tmp/cchaOj7l.s:138    .text:0000000000000058 .L0 
     /tmp/cchaOj7l.s:143    .text:000000000000005c .L0 
     /tmp/cchaOj7l.s:144    .text:000000000000005c .L0 
     /tmp/cchaOj7l.s:146    .text:0000000000000064 .L0 
     /tmp/cchaOj7l.s:147    .text:0000000000000064 .L0 
     /tmp/cchaOj7l.s:149    .text:0000000000000068 .L0 
     /tmp/cchaOj7l.s:151    .text:000000000000006c .L0 
     /tmp/cchaOj7l.s:157    .text:000000000000006c _Z15thread_dispatchv
     /tmp/cchaOj7l.s:160    .text:000000000000006c .L0 
     /tmp/cchaOj7l.s:161    .text:000000000000006c .L0 
     /tmp/cchaOj7l.s:162    .text:0000000000000070 .L0 
GAS LISTING /tmp/cchaOj7l.s 			page 10


     /tmp/cchaOj7l.s:164    .text:0000000000000074 .L0 
     /tmp/cchaOj7l.s:166    .text:0000000000000078 .L0 
     /tmp/cchaOj7l.s:168    .text:0000000000000078 .L0 
   src/syscall_c.cpp:31     .text:0000000000000078 .L0 
     /tmp/cchaOj7l.s:174    .text:000000000000007c .L0 
   src/syscall_c.cpp:32     .text:000000000000007c .L0 
     /tmp/cchaOj7l.s:180    .text:0000000000000080 .L0 
     /tmp/cchaOj7l.s:181    .text:0000000000000084 .L0 
     /tmp/cchaOj7l.s:182    .text:0000000000000084 .L0 
     /tmp/cchaOj7l.s:184    .text:0000000000000088 .L0 
     /tmp/cchaOj7l.s:186    .text:000000000000008c .L0 
     /tmp/cchaOj7l.s:192    .text:000000000000008c .L0 
     /tmp/cchaOj7l.s:697    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cchaOj7l.s:1380   .debug_str:00000000000003e4 .LASF67
     /tmp/cchaOj7l.s:1318   .debug_str:0000000000000219 .LASF68
     /tmp/cchaOj7l.s:1262   .debug_str:0000000000000056 .LASF69
     /tmp/cchaOj7l.s:5      .text:0000000000000000 .Ltext0
     /tmp/cchaOj7l.s:189    .text:000000000000008c .Letext0
     /tmp/cchaOj7l.s:1246   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cchaOj7l.s:1334   .debug_str:00000000000002ac .LASF0
     /tmp/cchaOj7l.s:1340   .debug_str:00000000000002c6 .LASF1
     /tmp/cchaOj7l.s:1326   .debug_str:0000000000000270 .LASF2
     /tmp/cchaOj7l.s:1316   .debug_str:0000000000000212 .LASF4
     /tmp/cchaOj7l.s:1362   .debug_str:0000000000000369 .LASF3
     /tmp/cchaOj7l.s:1264   .debug_str:0000000000000079 .LASF5
     /tmp/cchaOj7l.s:1342   .debug_str:00000000000002d9 .LASF6
     /tmp/cchaOj7l.s:1332   .debug_str:0000000000000299 .LASF7
     /tmp/cchaOj7l.s:1384   .debug_str:00000000000004b7 .LASF8
     /tmp/cchaOj7l.s:1308   .debug_str:00000000000001c4 .LASF9
     /tmp/cchaOj7l.s:1346   .debug_str:00000000000002fa .LASF10
     /tmp/cchaOj7l.s:1382   .debug_str:00000000000004a8 .LASF11
     /tmp/cchaOj7l.s:1268   .debug_str:0000000000000085 .LASF12
     /tmp/cchaOj7l.s:1252   .debug_str:0000000000000022 .LASF13
     /tmp/cchaOj7l.s:1276   .debug_str:00000000000000cf .LASF14
     /tmp/cchaOj7l.s:1358   .debug_str:000000000000033b .LASF15
     /tmp/cchaOj7l.s:1282   .debug_str:00000000000000f9 .LASF16
     /tmp/cchaOj7l.s:1298   .debug_str:0000000000000189 .LASF17
     /tmp/cchaOj7l.s:1338   .debug_str:00000000000002c0 .LASF70
     /tmp/cchaOj7l.s:1260   .debug_str:0000000000000048 .LASF18
     /tmp/cchaOj7l.s:1290   .debug_str:0000000000000141 .LASF20
     /tmp/cchaOj7l.s:1370   .debug_str:00000000000003a6 .LASF19
     /tmp/cchaOj7l.s:1250   .debug_str:0000000000000008 .LASF21
     /tmp/cchaOj7l.s:1356   .debug_str:0000000000000330 .LASF22
     /tmp/cchaOj7l.s:1392   .debug_str:00000000000004f9 .LASF23
     /tmp/cchaOj7l.s:1254   .debug_str:0000000000000032 .LASF24
     /tmp/cchaOj7l.s:1368   .debug_str:0000000000000391 .LASF26
     /tmp/cchaOj7l.s:1288   .debug_str:0000000000000138 .LASF28
     /tmp/cchaOj7l.s:1286   .debug_str:0000000000000123 .LASF30
     /tmp/cchaOj7l.s:1364   .debug_str:000000000000037b .LASF25
     /tmp/cchaOj7l.s:1352   .debug_str:0000000000000318 .LASF27
     /tmp/cchaOj7l.s:1378   .debug_str:00000000000003dd .LASF29
     /tmp/cchaOj7l.s:1372   .debug_str:00000000000003b3 .LASF31
     /tmp/cchaOj7l.s:1304   .debug_str:00000000000001b6 .LASF32
     /tmp/cchaOj7l.s:1284   .debug_str:000000000000010f .LASF33
     /tmp/cchaOj7l.s:1248   .debug_str:0000000000000000 .LASF34
     /tmp/cchaOj7l.s:1312   .debug_str:00000000000001e8 .LASF35
     /tmp/cchaOj7l.s:1294   .debug_str:000000000000016d .LASF36
GAS LISTING /tmp/cchaOj7l.s 			page 11


     /tmp/cchaOj7l.s:1270   .debug_str:0000000000000095 .LASF37
     /tmp/cchaOj7l.s:1396   .debug_str:000000000000051c .LASF38
     /tmp/cchaOj7l.s:1296   .debug_str:0000000000000175 .LASF39
     /tmp/cchaOj7l.s:1336   .debug_str:00000000000002b9 .LASF40
     /tmp/cchaOj7l.s:1390   .debug_str:00000000000004e6 .LASF41
     /tmp/cchaOj7l.s:1258   .debug_str:0000000000000041 .LASF42
     /tmp/cchaOj7l.s:1302   .debug_str:00000000000001a3 .LASF43
     /tmp/cchaOj7l.s:1306   .debug_str:00000000000001be .LASF44
     /tmp/cchaOj7l.s:1376   .debug_str:00000000000003cb .LASF45
     /tmp/cchaOj7l.s:1256   .debug_str:000000000000003b .LASF46
     /tmp/cchaOj7l.s:1398   .debug_str:0000000000000524 .LASF47
     /tmp/cchaOj7l.s:1394   .debug_str:0000000000000511 .LASF48
     /tmp/cchaOj7l.s:1360   .debug_str:0000000000000351 .LASF49
     /tmp/cchaOj7l.s:1320   .debug_str:000000000000022b .LASF50
     /tmp/cchaOj7l.s:1324   .debug_str:0000000000000258 .LASF51
     /tmp/cchaOj7l.s:1274   .debug_str:00000000000000c5 .LASF52
     /tmp/cchaOj7l.s:1314   .debug_str:00000000000001fc .LASF53
     /tmp/cchaOj7l.s:1328   .debug_str:000000000000027e .LASF54
     /tmp/cchaOj7l.s:1310   .debug_str:00000000000001d2 .LASF55
     /tmp/cchaOj7l.s:1366   .debug_str:0000000000000382 .LASF56
     /tmp/cchaOj7l.s:1272   .debug_str:00000000000000a9 .LASF57
     /tmp/cchaOj7l.s:1374   .debug_str:00000000000003c6 .LASF58
     /tmp/cchaOj7l.s:1292   .debug_str:000000000000015c .LASF59
     /tmp/cchaOj7l.s:1266   .debug_str:0000000000000080 .LASF60
     /tmp/cchaOj7l.s:1330   .debug_str:0000000000000288 .LASF61
     /tmp/cchaOj7l.s:1388   .debug_str:00000000000004d1 .LASF71
     /tmp/cchaOj7l.s:1322   .debug_str:0000000000000236 .LASF72
     /tmp/cchaOj7l.s:1278   .debug_str:00000000000000db .LASF73
     /tmp/cchaOj7l.s:1300   .debug_str:000000000000018e .LASF74
     /tmp/cchaOj7l.s:158    .text:000000000000006c .LFB44
     /tmp/cchaOj7l.s:187    .text:000000000000008c .LFE44
     /tmp/cchaOj7l.s:1350   .debug_str:000000000000030f .LASF62
     /tmp/cchaOj7l.s:1344   .debug_str:00000000000002ec .LASF64
     /tmp/cchaOj7l.s:85     .text:0000000000000034 .LFB43
     /tmp/cchaOj7l.s:152    .text:000000000000006c .LFE43
     /tmp/cchaOj7l.s:1189   .debug_loc:0000000000000000 .LLST2
     /tmp/cchaOj7l.s:104    .text:0000000000000044 .LBB14
     /tmp/cchaOj7l.s:116    .text:000000000000004c .LBE14
     /tmp/cchaOj7l.s:1203   .debug_loc:0000000000000039 .LLST3
     /tmp/cchaOj7l.s:125    .text:0000000000000050 .LBB16
     /tmp/cchaOj7l.s:141    .text:000000000000005c .LBE16
     /tmp/cchaOj7l.s:1386   .debug_str:00000000000004c7 .LASF63
     /tmp/cchaOj7l.s:1280   .debug_str:00000000000000eb .LASF65
     /tmp/cchaOj7l.s:10     .text:0000000000000000 .LFB42
     /tmp/cchaOj7l.s:79     .text:0000000000000034 .LFE42
     /tmp/cchaOj7l.s:1354   .debug_str:000000000000032b .LASF66
     /tmp/cchaOj7l.s:1211   .debug_loc:000000000000005d .LLST0
     /tmp/cchaOj7l.s:30     .text:0000000000000010 .LBB10
     /tmp/cchaOj7l.s:43     .text:0000000000000018 .LBE10
     /tmp/cchaOj7l.s:1225   .debug_loc:0000000000000096 .LLST1
     /tmp/cchaOj7l.s:53     .text:000000000000001c .LBB12
     /tmp/cchaOj7l.s:69     .text:0000000000000028 .LBE12
     /tmp/cchaOj7l.s:1348   .debug_str:0000000000000309 .LASF75
     /tmp/cchaOj7l.s:88     .text:0000000000000034 .LVL4
     /tmp/cchaOj7l.s:139    .text:000000000000005c .LVL7
     /tmp/cchaOj7l.s:102    .text:0000000000000044 .LVL5
     /tmp/cchaOj7l.s:113    .text:000000000000004c .LVL6
GAS LISTING /tmp/cchaOj7l.s 			page 12


     /tmp/cchaOj7l.s:14     .text:0000000000000000 .LVL0
     /tmp/cchaOj7l.s:67     .text:0000000000000028 .LVL3
     /tmp/cchaOj7l.s:28     .text:0000000000000010 .LVL1
     /tmp/cchaOj7l.s:40     .text:0000000000000018 .LVL2
     /tmp/cchaOj7l.s:193    .debug_info:0000000000000000 .Ldebug_info0

NO UNDEFINED SYMBOLS
